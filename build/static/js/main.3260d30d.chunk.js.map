{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchURL","isLargeRow","useState","movies","setMovies","trailUrl","setTrailUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","APIKEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3260d30d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React,{useState, useEffect} from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nconst Row = ({title, fetchURL, isLargeRow}) => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailUrl, setTrailUrl] = useState(\"\");\r\n    useEffect(() =>{\r\n        async function fetchData(){\r\n            const request =  await axios.get(fetchURL);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[fetchURL]);\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n        // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n    };\r\n    const handleClick =(movie) =>{\r\n        if(trailUrl){\r\n            setTrailUrl(\"\");\r\n        }else{\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(url =>{\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n               \r\n                setTrailUrl(urlParams.get('v'));\r\n            })\r\n            .catch((error)=> console.log(error))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {\r\n                movies.map(movie =>(\r\n                    <img key={movie.id} \r\n                    onClick={()=> handleClick(movie)}\r\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} src={`${base_url}${isLargeRow? movie.poster_path:movie.backdrop_path}`} alt={movie.name}/>\r\n                ))\r\n                }\r\n            </div>\r\n            {trailUrl && <YouTube videoId={trailUrl} opts={opts}/> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","const APIKEY = \"a8dd3a9f87595c9f6db57dd603a7f8a6\";\r\n\r\nconst requests ={\r\n    fetchTrending :`/trending/all/week?api_key=${APIKEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${APIKEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${APIKEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${APIKEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${APIKEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${APIKEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${APIKEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${APIKEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;\r\n","import React, {useState, useEffect} from 'react'\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\"\r\nconst Banner = () => {\r\n    const [movie, setMovie] = useState([]);\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1)])\r\n        }\r\n        fetchData()\r\n    },[])\r\n    function truncate(str,n){\r\n        return str?.length > n ? str.substr(0, n-1) + \" ... \" : str;\r\n    }\r\n    return (\r\n        <header className=\"banner\"\r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition: \"center center\"\r\n        }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner__buttons\">\r\n                <button className=\"banner__button\">Play</button>\r\n                <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">\r\n                {truncate(movie?.overview, 150)}\r\n                </h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\"></div>           \r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React,{useEffect, useState} from 'react'\r\nimport \"./Nav.css\"\r\nconst Nav = () => {\r\n    const [show, handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if(window.scrollY > 100) {\r\n                handleShow(true);\r\n            }else{\r\n                handleShow(false);\r\n            }\r\n        });\r\n        return()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img className=\"nav__logo\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n            alt=\"Netflix_logo\"\r\n            /> \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport './App.css';\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n     <Banner />\n     <Row title=\"NETFLIX ORIGINALS\" fetchURL={requests.fetchNetflixOriginals} isLargeRow={true}/>\n     <Row title=\"Trending Now\" fetchURL={requests.fetchTrending} />\n     <Row title=\"Top Rated\" fetchURL={requests.fetchTopRated} />\n     <Row title=\"Action\" fetchURL={requests.fetchActionMovies} />\n     <Row title=\"Comedies\" fetchURL={requests.fetchComedyMovies} />\n     <Row title=\"Romance\" fetchURL={requests.fetchRomanceMovies} />\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}